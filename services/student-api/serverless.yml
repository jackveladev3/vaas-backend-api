service: smartclass-app-student-api

plugins:
  - serverless-bundle
  - serverless-offline
  - serverless-dotenv-plugin

custom: ${file(../../serverless.common.yml):custom}

# package:
#   individually: true

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: ap-northeast-1
  tracing:
    apiGateway: true
    lambda: true

  apiGateway:
    restApiId:
      "Fn::ImportValue": ${self:custom.stage}-ApiGatewayRestApiId
    restApiRootResourceId:
      "Fn::ImportValue": ${self:custom.stage}-ApiGatewayRestApiRootResourceId

  # These environment variables are made available to our functions
  # under process.env.
  environment:
    TZ: Asia/Tokyo
    REGION: ap-northeast-1
    stage: ${self:custom.stage}
    resourcesStage: ${self:custom.resourcesStage}
    databaseServiceName: ${self:custom.databaseServiceName}
    bucketName: smartclass-uploads-dev-s3bucket-1dx0mtjd0es7q

  iamRoleStatements:
    - ${file(../../serverless.common.yml):lambdaPolicyXRay}
    - Effect: Allow
      Action:
        - ssm:GetParameter
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:ssm:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":parameter/*"

    - Effect: Allow
      Action:
        - ssm:GetParameter
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:ssm:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":parameter/stripeSecretKey/*"
            - ":parameter/sendGridApiKey/*"

    - Effect: Allow
      Action:
        - ssm:GetParameters
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:ssm:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":parameter/cognito/*"

    - Effect: Allow
      Action:
        - ssm:GetParameters
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:ssm:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":parameter/accessKey/*" 
    
    - Effect: Allow
      Action:
        - ssm:GetParameters
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:ssm:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":parameter/secretKey/*"           

    - Effect: Allow
      Action:
        - cognito-idp:AdminAddUserToGroup
        - cognito-idp:AdminUpdateUserAttributes
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:cognito-idp:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":userpool/${self:provider.environment.REGION}*"

    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchGetItem
        - dynamodb:BatchWriteItem
        - s3:ListBucket
        - s3:GetObject
        - s3:PutObject
        - s3:DeleteObject
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - "Fn::ImportValue": ${self:custom.resourcesStage}-EnterpriseTableArn
        - "Fn::ImportValue": ${self:custom.resourcesStage}-AdminTableArn
        - Fn::Join:
          - "/"
          -
            - "Fn::ImportValue": ${self:custom.resourcesStage}-AdminTableArn 
            - "index/*"
        - "Fn::ImportValue": ${self:custom.resourcesStage}-LectureTableArn
        - Fn::Join:
          - "/"
          -
            - "Fn::ImportValue": ${self:custom.resourcesStage}-LectureTableArn 
            - "index/*"
        - "Fn::ImportValue": ${self:custom.resourcesStage}-ParticipantTableArn
        - Fn::Join:
          - "/"
          -
            - "Fn::ImportValue": ${self:custom.resourcesStage}-ParticipantTableArn 
            - "index/*"
        - "Fn::ImportValue": ${self:custom.resourcesStage}-WorkBookTableArn
        - "Fn::ImportValue": ${self:custom.resourcesStage}-StudentTableArn
        - Fn::Join:
          - "/"
          -
            - "Fn::ImportValue": ${self:custom.resourcesStage}-StudentTableArn 
            - "index/*"
        - "Fn::ImportValue": ${self:custom.resourcesStage}-TutorTableArn
        - Fn::Join:
          - "/"
          -
            - "Fn::ImportValue": ${self:custom.resourcesStage}-TutorTableArn 
            - "index/*"
        - "Fn::ImportValue": ${self:custom.resourcesStage}-ChatTableArn
        - "Fn::ImportValue": ${self:custom.resourcesStage}-WorkBookPageTableArn
        - "Fn::ImportValue": ${self:custom.resourcesStage}-UploadTableArn
        - Fn::Join:
            - "/"
            - - "Fn::ImportValue": ${self:custom.resourcesStage}-UploadTableArn
              - "index/*"

functions:
  # student
  StudentLogin:
    handler: src/login/login.main
    warmup: v1
    timeout: 20
    memorySize: 1024
    environment:
      VERSION: 0.0.2
    events:
      - http:
          path: student/login
          method: POST
          authorizer: aws_iam
          cors: true
          request:
            parameters:
              querystrings:
                type: true

  # Get presigned url for uploading material
  UploadMaterial:
    handler: src/lecture/upload.main
    warmup: v1
    timeout: 5
    memorySize: 1024
    environment:
      VERSION: 0.0.2
    events:
      - http:
          path: student/uploads
          method: POST
          authorizer: aws_iam
          cors: true
          request:
            parameters:
              querystrings:
                type: true

  # Update upload material of a participant
  UpdateUploadMaterial:
    handler: src/lecture/updateUpload.main
    warmup: v1
    timeout: 30
    memorySize: 1024
    environment:
      VERSION: 0.0.2
    events:
      - http:
          path: student/updateUploaded
          method: POST
          authorizer: aws_iam
          cors: true
          request:
            parameters:
              querystrings:
                type: true

  # delete file s3 bucket and update upload material of a participant
  DeleteUploadedMaterial:
    handler: src/lecture/deleteUpload.main
    warmup: v1
    timeout: 5
    memorySize: 1024
    environment:
      VERSION: 0.0.2
    events:
      - http:
          path: student/deleteUploaded
          method: POST
          authorizer: aws_iam
          cors: true
          request:
            parameters:
              querystrings:
                type: true

  # GetLecture
  GetLecture:
    handler: src/lecture/getLecture.main
    warmup: v1
    timeout: 5
    memorySize: 1024
    environment:
      VERSION: 0.0.2
    events:
      - http:
          path: student/getLecture/{lectureURLId}
          method: GET
          authorizer: aws_iam
          cors: true
          request:
            parameters:
              paths:
                lectureURLId: true

  # GetToken
  GetToken:
    handler: src/login/token.main
    warmup: v1
    timeout: 15
    memorySize: 1024
    environment:
      VERSION: 0.0.2
    events:
      - http:
          path: student/token/{lectureURLId}
          method: GET
          cors: true
          request:
            parameters:
              paths:
                lectureURLId: true

  StudentGet:
    handler: src/login/get.main
    warmup: v1
    timeout: 5
    memorySize: 1024
    environment:
      VERSION: 0.0.2
    events:
      - http:
          path: student/get/{enterpriseId}/{studentId}
          method: GET
          authorizer: aws_iam
          cors: true
          request:
            parameters:
              querystrings:
                type: true

  # Get all students
  StudentGetAll:
    handler: src/login/get.main
    warmup: v1
    timeout: 5
    memorySize: 1024
    environment:
      VERSION: 0.0.2
    events:
      - http:
          path: student/get/{enterpriseId}
          method: GET
          authorizer: aws_iam
          cors: true
          request:
            parameters:
              querystrings:
                type: true

  # Upload white board images
  UploadWhiteboardImgs:
    handler: src/lecture/uploadWhiteboardImg.main
    warmup: v1
    timeout: 5
    memorySize: 1024
    environment:
      VERSION: 0.0.2
    events:
      - http:
          path: student/uploadWhiteboardImgs
          method: POST
          authorizer: aws_iam
          cors: true
          request:
            parameters:
              querystrings:
                type: true

  # Update white board images
  UpdateWhiteboardImgs:
    handler: src/lecture/updateWhiteboardImg.main
    warmup: v1
    timeout: 5
    memorySize: 1024
    environment:
      VERSION: 0.0.2
    events:
      - http:
          path: student/updateWhiteboardImgs
          method: POST
          authorizer: aws_iam
          cors: true
          request:
            parameters:
              querystrings:
                type: true
